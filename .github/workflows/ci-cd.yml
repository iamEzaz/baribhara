name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          'api-gateway',
          'auth-service',
          'user-service',
          'property-service',
          'tenant-service',
          'invoice-service',
          'notification-service',
          'report-service',
          'admin-service'
        ]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/services/${{ matrix.service }}/package-lock.json
    
    - name: Install dependencies
      working-directory: backend/services/${{ matrix.service }}
      run: npm ci
    
    - name: Run linting
      working-directory: backend/services/${{ matrix.service }}
      run: npm run lint
    
    - name: Run tests
      working-directory: backend/services/${{ matrix.service }}
      run: npm test
    
    - name: Run e2e tests
      working-directory: backend/services/${{ matrix.service }}
      run: npm run test:e2e

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          'api-gateway',
          'auth-service',
          'user-service',
          'property-service',
          'tenant-service',
          'invoice-service',
          'notification-service',
          'report-service',
          'admin-service'
        ]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: backend/services/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          'api-gateway',
          'auth-service',
          'user-service',
          'property-service',
          'tenant-service',
          'invoice-service',
          'notification-service',
          'report-service',
          'admin-service'
        ]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
    
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ap-southeast-1 --name baribhara-staging
    
    - name: Deploy to staging
      run: |
        kubectl apply -f backend/deployment/kubernetes/namespace.yml
        kubectl apply -f backend/deployment/kubernetes/configmap.yml
        kubectl apply -f backend/deployment/kubernetes/secrets.yml
        kubectl apply -f backend/deployment/kubernetes/
        kubectl rollout status deployment/api-gateway -n baribhara

  deploy-production:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
    
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ap-southeast-1 --name baribhara-production
    
    - name: Deploy to production
      run: |
        kubectl apply -f backend/deployment/kubernetes/namespace.yml
        kubectl apply -f backend/deployment/kubernetes/configmap.yml
        kubectl apply -f backend/deployment/kubernetes/secrets.yml
        kubectl apply -f backend/deployment/kubernetes/
        kubectl rollout status deployment/api-gateway -n baribhara
    
    - name: Run smoke tests
      run: |
        # Add smoke tests here
        echo "Running smoke tests..."
