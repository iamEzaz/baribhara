version: '3.8'

services:
  # NestJS Backend (All Services as Modules)
  nest-services:
    build:
      context: ../services/nest-services
      dockerfile: Dockerfile
    container_name: baribhara-nest-services
    ports:
      - "3000:3000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=root
      - DB_PASSWORD=password
      - DB_NAME=baribhara
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key
      - NODE_ENV=production
    depends_on:
      - postgres
      - redis
    networks:
      - baribhara-network
    restart: unless-stopped

  # Go API Gateway
  api-gateway:
    build:
      context: ../services/api-gateway
      dockerfile: Dockerfile
    container_name: baribhara-api-gateway
    ports:
      - "8080:8080"
    environment:
      - NEST_SERVICES_URL=http://nest-services:3000
      - PORT=8080
    depends_on:
      - nest-services
    networks:
      - baribhara-network
    restart: unless-stopped

  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: baribhara-postgres
    environment:
      POSTGRES_DB: baribhara
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/migrations:/docker-entrypoint-initdb.d
    networks:
      - baribhara-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: baribhara-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - baribhara-network
    restart: unless-stopped

  # Message Queue
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: baribhara-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - baribhara-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: baribhara-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - baribhara-network
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: baribhara-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - baribhara-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: baribhara-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - baribhara-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  baribhara-network:
    driver: bridge
