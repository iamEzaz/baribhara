version: '3.8'

services:
  # Databases
  postgres:
    image: postgres:15-alpine
    container_name: baribhara-postgres
    environment:
      POSTGRES_DB: baribhara
      POSTGRES_USER: baribhara
      POSTGRES_PASSWORD: baribhara123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - baribhara-network

  redis:
    image: redis:7-alpine
    container_name: baribhara-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - baribhara-network

  # Message Queue
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: baribhara-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - baribhara-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: baribhara-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - baribhara-network

  # API Gateway
  kong:
    image: kong:3.4-alpine
    container_name: baribhara-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"  # Proxy
      - "8001:8001"  # Admin API
    volumes:
      - ./kong/kong.yml:/kong/declarative/kong.yml
    networks:
      - baribhara-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: baribhara-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - baribhara-network

  grafana:
    image: grafana/grafana:latest
    container_name: baribhara-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - baribhara-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: baribhara-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - baribhara-network

  # Service Discovery
  consul:
    image: consul:1.16
    container_name: baribhara-consul
    ports:
      - "8500:8500"
    command: agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0
    networks:
      - baribhara-network

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: baribhara-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - kong
    networks:
      - baribhara-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  baribhara-network:
    driver: bridge
